/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package engtelecom.poo;

import java.io.IOException;
import java.nio.file.DirectoryStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Scanner;
import java.util.stream.Stream;

public class App {

    public static void main(String[] args) throws IOException{

        // try(Scanner arq = new Scanner(App.class.getClassLoader().getResourceAsStream("produtos.txt"))){
        //     while (arq.hasNext()){
        //         System.out.println(arq.nextLine());
        //     }
        // }catch (Exception e) {
        //     System.out.println("Erro: " + e.toString());
        //  }

        // String currentDir = System.getProperty("user.dir");
        // Path path = Path.of(args[0]);

        // if (Files.exists(path)){
        //     System.out.println(String.format("Arquivo: %s", path.toAbsolutePath()));
        //     System.out.println(String.format("Regular: %s", Files.isRegularFile(path)));
        //     System.out.println(String.format("Diretorio: %s", Files.isDirectory(path)));
        //     System.out.println(String.format("Permissao de leitura: %s", Files.isReadable(path)));
        //     System.out.println(String.format("Permissao de escrita: %s", Files.isWritable(path)));
        // } else {
        //     System.out.println("Arquivo nao encontrado");
        // }
        
        // String currentDir = System.getProperty("user.dir");
        // Path dir = Path.of(currentDir);
        // try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir)) {
        //     for (Path path: stream) {
        //         System.out.println(path.getFileName());
        //     }
        // } catch (IOException e) {
        //     System.out.println("Erro: " + e);
        // }

        String currentDir = System.getProperty("user.dir");
        Path inicial = Path.of(currentDir);

        try (Stream<Path> walk = Files.walk(inicial)) {
            walk.sorted().forEach(arq -> {
                //profundidade do caminho relativo ao diret√≥rio inicial
                int profundidade = inicial.relativize(arq).getNameCount();
                String sufixo = (Files.isDirectory(arq) ? " (d)" : "");
                System.out.println(" ".repeat(profundidade) + arq.getFileName() + sufixo);
            });
        } catch ( Exception e ){
            System.err.println(e);
        }
    }
}
